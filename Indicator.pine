//@version=5
indicator("Matrix Indicator", overlay = true)



//─────────────────────────────────────────────
// SECTION 2 — Trendlines with Breaks  (original v5 logic)
//─────────────────────────────────────────────
length      = input.int(14, "Swing Detection Lookback")
mult        = input.float(1., "Slope", minval = 0, step = .1)
calcMethod  = input.string("Atr", "Slope Calculation Method", options = ["Atr","Stdev","Linreg"])
backpaint   = input.bool(true, tooltip = "Backpainting offset displayed elements in the past. Disable to see real time info.")
upCss       = input.color(color.teal, "Up Trendline Color", group = "Style")
dnCss       = input.color(color.red,  "Down Trendline Color", group = "Style")
showExt     = input.bool(true, "Show Extended Lines")

var float upper = na
var float lower = na
var float slope_ph = na
var float slope_pl = na
offset = backpaint ? length : 0
n = bar_index
src = close

ph = ta.pivothigh(length, length)
pl = ta.pivotlow(length, length)

slope = switch calcMethod
    "Atr"    => ta.atr(length) / length * mult
    "Stdev"  => ta.stdev(src,length) / length * mult
    "Linreg" => math.abs(ta.sma(src * n, length) - ta.sma(src, length) * ta.sma(n, length)) / ta.variance(n, length) / 2 * mult

slope_ph := ph ? slope : slope_ph
slope_pl := pl ? slope : slope_pl
upper    := ph ? ph : upper - slope_ph
lower    := pl ? pl : lower + slope_pl

var int upos = 0
var int dnos = 0
upos := ph ? 0 : close > upper - slope_ph * length ? 1 : upos
dnos := pl ? 0 : close < lower + slope_pl * length ? 1 : dnos

var line uptl = line.new(na,na,na,na, color = upCss, style = line.style_dashed, extend = extend.right)
var line dntl = line.new(na,na,na,na, color = dnCss, style = line.style_dashed, extend = extend.right)

if ph and showExt
    line.set_xy1(uptl, n-offset, backpaint ? ph : upper - slope_ph * length)
    line.set_xy2(uptl, n-offset+1, backpaint ? ph - slope : upper - slope_ph * (length+1))

if pl and showExt
    line.set_xy1(dntl, n-offset, backpaint ? pl : lower + slope_pl * length)
    line.set_xy2(dntl, n-offset+1, backpaint ? pl + slope : lower + slope_pl * (length+1))

plot(backpaint ? upper : upper - slope_ph * length, "Upper", color = ph ? na : upCss, offset = -offset)
plot(backpaint ? lower : lower + slope_pl * length, "Lower", color = pl ? na : dnCss, offset = -offset)

plotshape(upos > upos[1] ? low  : na, "Upper Break",  shape.labelup,   location.absolute, upCss, text="B", textcolor=color.white, size = size.tiny)
plotshape(dnos > dnos[1] ? high : na, "Lower Break",  shape.labeldown, location.absolute, dnCss, text="B", textcolor=color.white, size = size.tiny)

alertcondition(upos > upos[1], "Upward Breakout",   "Price broke the down-trendline upward")
alertcondition(dnos > dnos[1], "Downward Breakout", "Price broke the up-trendline downward")



//─────────────────────────────────────────────
// SECTION 3 — Order Blocks (Bullish & Bearish)
//─────────────────────────────────────────────
// Bullish Order Block: Last bearish candle before a bullish move (close > open after a down candle)
// Bearish Order Block: Last bullish candle before a bearish move (close < open after an up candle)

var float ob3_bull_low = na
var float ob3_bull_high = na
var float ob3_bear_low = na
var float ob3_bear_high = na

// Detect bullish order block (down candle followed by up candle)
is_bull_ob3 = close[2] < open[2] and close[1] > open[1]
ob3_bull_low := is_bull_ob3 ? low[2] : ob3_bull_low[1]
ob3_bull_high := is_bull_ob3 ? high[2] : ob3_bull_high[1]

// Detect bearish order block (up candle followed by down candle)
is_bear_ob3 = close[2] > open[2] and close[1] < open[1]
ob3_bear_low := is_bear_ob3 ? low[2] : ob3_bear_low[1]
ob3_bear_high := is_bear_ob3 ? high[2] : ob3_bear_high[1]

// Draw bullish order block (green box)
var box bull_box3 = na
if not na(ob3_bull_low) and not na(ob3_bull_high)
    if not na(bull_box3)
        box.delete(bull_box3)
    bull_box3 := box.new(bar_index-2, ob3_bull_high, bar_index, ob3_bull_low, border_color=color.new(color.green, 0), bgcolor=color.new(color.green, 85))

// Draw bearish order block (red box)
var box bear_box3 = na
if not na(ob3_bear_low) and not na(ob3_bear_high)
    if not na(bear_box3)
        box.delete(bear_box3)
    bear_box3 := box.new(bar_index-2, ob3_bear_high, bar_index, ob3_bear_low, border_color=color.new(color.red, 0), bgcolor=color.new(color.red, 85))


//─────────────────────────────────────────────
// SECTION 4 — Fair Value Gap (FVG)
//─────────────────────────────────────────────

// ---- Inputs for customization ----
bullishColor = input.color(color.new(color.green, 70), "Bullish FVG Color")
bearishColor = input.color(color.new(color.red, 70), "Bearish FVG Color")
extendLines  = input.bool(true, "Extend FVG Lines?")
showLabels   = input.bool(false, "Show FVG Labels?")

// ---- FVG Detection Logic ----
bullishFVG = low[0] > high[2] and close[1] < close[0] and close[2] > close[1]
bearishFVG = high[0] < low[2] and close[1] > close[0] and close[2] < close[1]

// ---- Function to draw FVG and optional label ----
f_drawFVG(isBullish, topPrice, bottomPrice, labelPrice, boxColor, labelText, labelStyle) =>
    box.new(bar_index[2], topPrice, bar_index, bottomPrice, border_color=boxColor, border_style=line.style_solid, bgcolor=boxColor, extend=extendLines ? extend.right : extend.none)
    if showLabels
        label.new(bar_index, labelPrice, labelText, xloc=xloc.bar_index, yloc=yloc.price, style=labelStyle, color=boxColor, textcolor=color.white, size=size.small)

// ---- Plotting FVGs ----
if bullishFVG
    f_drawFVG(true, high[2], low[0], low[0], bullishColor, "Bullish FVG", label.style_label_up)

if bearishFVG
    f_drawFVG(false, low[2], high[0], high[0], bearishColor, "Bearish FVG", label.style_label_down)



//─────────────────────────────────────────────
// SECTION 5 — Auto FIB
//─────────────────────────────────────────────


depthTooltip = "The minimum number of bars that will be taken into account when calculating the indicator."
depth = input.int(title="Depth", defval=10, minval=2, inline = "Pivots", tooltip=depthTooltip)
reverse = input(false, "Reverse", display = display.data_window)
var extendLeft = input(false, "Extend Left    |    Extend Right", inline = "Extend Lines", display = display.data_window)
var extendRight = input(true, "", inline = "Extend Lines", display = display.data_window)
var extending = extend.none
if extendLeft and extendRight
    extending := extend.both
if extendLeft and not extendRight
    extending := extend.left
if not extendLeft and extendRight
    extending := extend.right
prices = input(true, "Show Prices", display = display.data_window)
levels = input(true, "Show Levels", inline = "Levels", display = display.data_window)
levelsFormat = input.string("Values", "", options = ["Values", "Percent"], inline = "Levels", display = display.data_window)
labelsPosition = input.string("Left", "Labels Position", options = ["Left", "Right"], display = display.data_window)
backgroundTransparency = input.int(85, "Background Transparency", minval = 0, maxval = 100, display = display.data_window)

upperThreshold = 0.236
lowerThreshold = 1.0

import TradingView/ZigZag/7 as zigzag

pivots(src, length, isHigh) =>
    if bar_index >= length
        price = nz(src[length])
        found = true
        for i = 0 to length * 2
            if (isHigh and src[i] > price) or (not isHigh and src[i] < price)
                found := false
                break
        if found
            chart.point.from_time(time[length], price)

update()=>
    var line lineLastHL = na
    var line lineLastLH = na
    var line lineLast = na

    var chart.point[] pivotsH = array.new<chart.point>()
    var chart.point lastH = na
    var chart.point[] pivotsL = array.new<chart.point>()
    var chart.point lastL = na

    var isHighLast = false
    var float startPrice = na
    var float endPrice = na

    H = pivots(high, depth / 2, true)
    L = pivots(low, depth / 2, false)

    countPivotsH = array.size(pivotsH)
    countPivotsL = array.size(pivotsL)

    if countPivotsH > 0 and countPivotsL > 0
        lastH := array.get(pivotsH, countPivotsH-1)
        lastL := array.get(pivotsL, countPivotsL-1)
        isHighLast := lastH.time > lastL.time
        if isHighLast
            if not na(H)
                if H.price > lastH.price
                    array.set(pivotsH, countPivotsH-1, H)
                H := na
        else
            if not na(L)
                if L.price < lastL.price
                    array.set(pivotsL, countPivotsL-1, L)
                L := na

    if not na(H)
        array.push(pivotsH, H)

    if not na(L)
        array.push(pivotsL, L)

    if barstate.islast and array.size(pivotsH) > 0 and array.size(pivotsL) > 0
        pivotsHCopy = array.copy(pivotsH)
        pivotsLCopy = array.copy(pivotsL)
        while array.size(pivotsHCopy) > 0 and array.size(pivotsLCopy) > 0
            lastH := array.pop(pivotsHCopy)
            lastL := array.pop(pivotsLCopy)

            isHighLast := lastH.time > lastL.time
            pivots = isHighLast ? pivotsHCopy : pivotsLCopy

            for i = array.size(pivots)-1 to 0
                if i < 0
                    break
                p = array.get(pivots, i)
                if p.time < lastL.time
                    break
                betterPrice = isHighLast ? p.price > lastH.price : p.price < lastL.price
                if p.price > lastH.price
                    lastH := array.pop(pivots)
                else
                    array.remove(pivots, i)

            if array.size(pivotsHCopy) == 0 or array.size(pivotsLCopy) == 0
                break

            isHighLast := lastH.time > lastL.time
            pivots := isHighLast ? pivotsHCopy : pivotsLCopy

            prevPivot = array.get(pivots, array.size(pivots)-1)
            startPrice := prevPivot.price

            if isHighLast
                endPrice := lastL.price
                diff = math.abs(startPrice - endPrice)
                if lastH.price > endPrice + diff * lowerThreshold or lastH.price < endPrice + diff * upperThreshold
                    array.push(pivotsLCopy, lastL)
                    continue
                line.delete(lineLastHL)
                line.delete(lineLastLH)
                lineLastHL := line.new(prevPivot, lastL, color=color.red, width=1, style=line.style_dashed, xloc = xloc.bar_time)
                lineLastLH := line.new(lastL, lastH, color=color.green, width=1, style=line.style_dashed, xloc = xloc.bar_time)
                lineLast := lineLastLH
            else
                endPrice := lastH.price
                diff = math.abs(startPrice - endPrice)
                if lastL.price < endPrice - diff * lowerThreshold or lastL.price > endPrice - diff * upperThreshold
                    array.push(pivotsHCopy, lastH)
                    continue
                line.delete(lineLastHL)
                line.delete(lineLastLH)
                lineLastLH := line.new(prevPivot, lastH, color=color.red, width=1, style=line.style_dashed, xloc = xloc.bar_time)
                lineLastHL := line.new(lastH, lastL, color=color.green, width=1, style=line.style_dashed, xloc = xloc.bar_time)
                lineLast := lineLastHL
            break
    diff = (isHighLast ? -1 : 1) * math.abs(startPrice - endPrice)
    offset = isHighLast ? line.get_y1(lineLastLH) - line.get_y2(lineLastLH) : line.get_y1(lineLastHL) - line.get_y2(lineLastHL)
    offset := (isHighLast ? -1 : 1) * math.abs(offset)
	if barstate.islast and na(lineLast)
		runtime.error("Not enough data to calculate Auto Fib Extension on the current symbol. Change the chart's timeframe to a lower one or select a smaller calculation depth using the indicator's `Depth` settings.")

    [endPrice - offset, diff, lineLast]

[endPrice, diff, lineLast] = update()

_draw_line(price, col) =>
    var id = line.new(time, price, time, price, color=col, width=1, extend=extending, xloc = xloc.bar_time)
    if not na(lineLast)
        line.set_xy1(id, line.get_x1(lineLast), price)
        line.set_xy2(id, line.get_x2(lineLast), price)
    id

_draw_label(price, txt, txtColor) =>
    if not na(price)
        x = labelsPosition == "Left" ? line.get_x1(lineLast) : not extendRight ? line.get_x2(lineLast) : time
        labelStyle = labelsPosition == "Left" ? label.style_label_right : label.style_label_left
        align = labelsPosition == "Left" ? text.align_right : text.align_left
        labelsAlignStrLeft = txt + '\n ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏ \n'
        labelsAlignStrRight = '       ' + txt + '\n ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏ \n'
        labelsAlignStr = labelsPosition == "Left" ? labelsAlignStrLeft : labelsAlignStrRight
        var id = label.new(x=x, y=price, text=labelsAlignStr, textcolor=txtColor, style=labelStyle, textalign=align, color=#00000000, xloc = xloc.bar_time)
        label.set_xy(id, x, price)
        label.set_text(id, labelsAlignStr)
        label.set_textcolor(id, txtColor)

_wrap(txt) =>
    "(" + str.tostring(txt, format.mintick) + ")"

_label_txt(level, price) =>
    if not na(price)
        l = levelsFormat == "Values" ? str.tostring(level) : str.tostring(level * 100) + "%"
        (levels ? l : "") + (prices ? _wrap(price) : "")

_crossing_level(sr, r) =>
    (r > sr and r < sr[1]) or (r < sr and r > sr[1])


processLevel(show, value, colorL, lineIdOther) =>
    float m = value
	r = endPrice + ((reverse ? -1 : 1) * diff * m)
    if show
		lineId = _draw_line(r, colorL)
        _draw_label(r, _label_txt(m, r), colorL)
        if _crossing_level(close, r)
            alert("Autofib: " + syminfo.ticker + " crossing level " + str.tostring(value))
        if not na(lineIdOther)
            linefill.new(lineId, lineIdOther, color = color.new(colorL, backgroundTransparency))
		lineId
    else
		lineIdOther

show_0  = input(true, "", inline = "Level0", display = display.data_window)
value_0 = input(0, "", inline = "Level0", display = display.data_window)
color_0 = input(#787b86, "", inline = "Level0", display = display.data_window)

show_0_236  = input(true, "", inline = "Level0", display = display.data_window)
value_0_236 = input(0.236, "", inline = "Level0", display = display.data_window)
color_0_236 = input(#f44336, "", inline = "Level0", display = display.data_window)

show_0_382  = input(true, "", inline = "Level1", display = display.data_window)
value_0_382 = input(0.382, "", inline = "Level1", display = display.data_window)
color_0_382 = input(#81c784, "", inline = "Level1", display = display.data_window)

show_0_5  = input(true, "", inline = "Level1", display = display.data_window)
value_0_5 = input(0.5, "", inline = "Level1", display = display.data_window)
color_0_5 = input(#4caf50, "", inline = "Level1", display = display.data_window)

show_0_618  = input(true, "", inline = "Level2", display = display.data_window)
value_0_618 = input(0.618, "", inline = "Level2", display = display.data_window)
color_0_618 = input(#009688, "", inline = "Level2", display = display.data_window)

show_0_65  = input(false, "", inline = "Level2", display = display.data_window)
value_0_65 = input(0.65, "", inline = "Level2", display = display.data_window)
color_0_65 = input(#009688, "", inline = "Level2", display = display.data_window)

show_0_786  = input(true, "", inline = "Level3", display = display.data_window)
value_0_786 = input(0.786, "", inline = "Level3", display = display.data_window)
color_0_786 = input(#64b5f6, "", inline = "Level3", display = display.data_window)

show_1  = input(true, "", inline = "Level3", display = display.data_window)
value_1 = input(1, "", inline = "Level3", display = display.data_window)
color_1 = input(#787b86, "", inline = "Level3", display = display.data_window)

show_1_272  = input(false, "", inline = "Level4", display = display.data_window)
value_1_272 = input(1.272, "", inline = "Level4", display = display.data_window)
color_1_272 = input(#81c784, "", inline = "Level4", display = display.data_window)

show_1_414  = input(false, "", inline = "Level4", display = display.data_window)
value_1_414 = input(1.414, "", inline = "Level4", display = display.data_window)
color_1_414 = input(#f44336, "", inline = "Level4", display = display.data_window)

show_1_618  = input(true, "", inline = "Level5", display = display.data_window)
value_1_618 = input(1.618, "", inline = "Level5", display = display.data_window)
color_1_618 = input(#2962ff, "", inline = "Level5", display = display.data_window)

show_1_65  = input(false, "", inline = "Level5", display = display.data_window)
value_1_65 = input(1.65, "", inline = "Level5", display = display.data_window)
color_1_65 = input(#2962ff, "", inline = "Level5", display = display.data_window)

show_2_618  = input(true, "", inline = "Level6", display = display.data_window)
value_2_618 = input(2.618, "", inline = "Level6", display = display.data_window)
color_2_618 = input(#f44336, "", inline = "Level6", display = display.data_window)

show_2_65  = input(false, "", inline = "Level6", display = display.data_window)
value_2_65 = input(2.65, "", inline = "Level6", display = display.data_window)
color_2_65 = input(#f44336, "", inline = "Level6", display = display.data_window)

show_3_618  = input(true, "", inline = "Level7", display = display.data_window)
value_3_618 = input(3.618, "", inline = "Level7", display = display.data_window)
color_3_618 = input(#9c27b0, "", inline = "Level7", display = display.data_window)

show_3_65  = input(false, "", inline = "Level7", display = display.data_window)
value_3_65 = input(3.65, "", inline = "Level7", display = display.data_window)
color_3_65 = input(#9c27b0, "", inline = "Level7", display = display.data_window)

show_4_236  = input(true, "", inline = "Level8", display = display.data_window)
value_4_236 = input(4.236, "", inline = "Level8", display = display.data_window)
color_4_236 = input(#e91e63, "", inline = "Level8", display = display.data_window)

show_4_618  = input(false, "", inline = "Level8", display = display.data_window)
value_4_618 = input(4.618, "", inline = "Level8", display = display.data_window)
color_4_618 = input(#81c784, "", inline = "Level8", display = display.data_window)

show_neg_0_236  = input(false, "", inline = "Level9", display = display.data_window)
value_neg_0_236 = input(-0.236, "", inline = "Level9", display = display.data_window)
color_neg_0_236 = input(#f44336, "", inline = "Level9", display = display.data_window)

show_neg_0_382  = input(false, "", inline = "Level9", display = display.data_window)
value_neg_0_382 = input(-0.382, "", inline = "Level9", display = display.data_window)
color_neg_0_382 = input(#81c784, "", inline = "Level9", display = display.data_window)

show_neg_0_618  = input(false, "", inline = "Level10", display = display.data_window)
value_neg_0_618 = input(-0.618, "", inline = "Level10", display = display.data_window)
color_neg_0_618 = input(#009688, "", inline = "Level10", display = display.data_window)

show_neg_0_65  = input(false, "", inline = "Level10", display = display.data_window)
value_neg_0_65 = input(-0.65, "", inline = "Level10", display = display.data_window)
color_neg_0_65 = input(#009688, "", inline = "Level10", display = display.data_window)


lineId0 = processLevel(show_neg_0_65, value_neg_0_65, color_neg_0_65, line(na))
lineId1 = processLevel(show_neg_0_618, value_neg_0_618, color_neg_0_618, lineId0)
lineId2 = processLevel(show_neg_0_382, value_neg_0_382, color_neg_0_382, lineId1)
lineId3 = processLevel(show_neg_0_236, value_neg_0_236, color_neg_0_236, lineId2)
lineId4 = processLevel(show_0, value_0, color_0, lineId3)
lineId5 = processLevel(show_0_236, value_0_236, color_0_236, lineId4)
lineId6 = processLevel(show_0_382, value_0_382, color_0_382, lineId5)
lineId7 = processLevel(show_0_5, value_0_5, color_0_5, lineId6)
lineId8 = processLevel(show_0_618, value_0_618, color_0_618, lineId7)
lineId9 = processLevel(show_0_65, value_0_65, color_0_65, lineId8)
lineId10 = processLevel(show_0_786, value_0_786, color_0_786, lineId9)
lineId11 = processLevel(show_1, value_1, color_1, lineId10)
lineId12 = processLevel(show_1_272, value_1_272, color_1_272, lineId11)
lineId13 = processLevel(show_1_414, value_1_414, color_1_414, lineId12)
lineId14 = processLevel(show_1_618, value_1_618, color_1_618, lineId13)
lineId15 = processLevel(show_1_65, value_1_65, color_1_65, lineId14)
lineId16 = processLevel(show_2_618, value_2_618, color_2_618, lineId15)
lineId17 = processLevel(show_2_65, value_2_65, color_2_65, lineId16)
lineId18 = processLevel(show_3_618, value_3_618, color_3_618, lineId17)
lineId19 = processLevel(show_3_65, value_3_65, color_3_65, lineId18)
lineId20 = processLevel(show_4_236, value_4_236, color_4_236, lineId19)
lineId21 = processLevel(show_4_618, value_4_618, color_4_618, lineId20)



//─────────────────────────────────────────────
// SECTION 6 — Triple EMA
//─────────────────────────────────────────────

//@version=5
//indicator("Triple EMA", shorttitle="TEMA", overlay=true)

// checkboxes for optional MAs
aema = input.bool(true,  title="Enable 2nd MA")
b = input.bool(true,  title="Enable 3rd MA")

// integer inputs with min values
len  = input.int(9,  minval=1, title="Length 1")
len2 = input.int(21, minval=1, title="Length 2")
len3 = input.int(50, minval=1, title="Length 3")

// source inputs
src1  = input.source(close, title="Source 1")
src2 = input.source(close, title="Source 2")
src3 = input.source(close, title="Source 3")

// calculations
out  = ta.ema(src1,  len)
out2 = ta.ema(src2, len2)
out3 = ta.ema(src3, len3)

// plots
plot(out,                 title="EMA 1", color=color.green, linewidth=2)
plot(aema ? out2 : na,       title="EMA 2", color=color.blue, linewidth=2)
plot(b ? out3 : na,       title="EMA 3", color=color.red, linewidth=2)


// === PRE-MARKET LEVELS ===
// === INPUTS ===
sessionTime = input.session("0400-0930", "Pre-Market Session")   // US equities pre-market

// === VARIABLES ===
var float preHigh = na
var float preLow  = na

// Track premarket session
inSession = time(timeframe.period, sessionTime)

// Capture high/low during pre-market
if inSession
    preHigh := na(preHigh) ? high : math.max(preHigh, high)
    preLow  := na(preLow)  ? low  : math.min(preLow, low)

// Reset at new day
newDay = ta.change(time("D"))
if newDay
    preHigh := na
    preLow  := na

// === PLOTTING ===
// Pre-market levels
plot(preHigh, "Pre Mkt High", color=color.purple, linewidth=2, style=plot.style_linebr)
plot(preLow,  "Pre Mkt Low",  color=color.red, linewidth=2, style=plot.style_linebr)

// Gamma territories background shading
bgcolor(not na(preHigh) and close > preHigh ? color.new(color.green, 85) : na, title="Bullish Gamma")
bgcolor(not na(preLow) and close < preLow   ? color.new(color.red, 85)   : na, title="Bearish Gamma")

// Labels on last bar
if barstate.islast
    if not na(preHigh)
        label.new(bar_index, preHigh, "Pre mkt high\nBULLISH GAMMA TERRITORY",             color=color.purple, textcolor=color.white, style=label.style_label_down, yloc=yloc.price)
    if not na(preLow)
        label.new(bar_index, preLow, "Pre mkt low\nBEARISH GAMMA TERRITORY",             color=color.red, textcolor=color.white, style=label.style_label_up, yloc=yloc.price)





// === Detect Candlestick Patterns ===

// Hammer (long lower wick, small body)
isHammer = close > open and (open - low) / (high - low) > 0.6

// Inverted Hammer (long upper wick, small body)
isInvHammer = close > open and (high - close) / (high - low) > 0.6

// Bullish Engulfing
isBullEngulf = close[1] < open[1] and close > open and close > open[1] and open < close[1]

// Bearish Engulfing
isBearEngulf = close[1] > open[1] and close < open and close < open[1] and open > close[1]

// Morning Star (simplified: down candle, small body, strong up candle)
isMorningStar = close[2] < open[2] and math.abs(close[1] - open[1]) < (high[1]-low[1])*0.3 and close > (open[2] + close[2]) / 2

// Evening Star (simplified: up candle, small body, strong down candle)
isEveningStar = close[2] > open[2] and math.abs(close[1] - open[1]) < (high[1]-low[1])*0.3 and close < (open[2] + close[2]) / 2

// === Plot Signals ===
plotshape(isHammer, title="Hammer", location=location.belowbar, color=color.green, style=shape.labelup, text="Ham", textcolor=color.black)
plotshape(isInvHammer, title="Inv Hammer", location=location.abovebar, color=color.red, style=shape.labeldown, text="InvH", textcolor=color.black)
plotshape(isBullEngulf, title="Bull Engulf", location=location.belowbar, color=color.green, style=shape.labelup, text="Bull", textcolor=color.black)
plotshape(isBearEngulf, title="Bear Engulf", location=location.abovebar, color=color.red, style=shape.labeldown, text="Bear"), textcolor=color.black
plotshape(isMorningStar, title="Morning Star", location=location.belowbar, color=color.green, style=shape.labelup, text="Mor", textcolor=color.black)
plotshape(isEveningStar, title="Evening Star", location=location.abovebar, color=color.red, style=shape.labeldown, text="Eve", textcolor=color.black)


